diff --git a/bin/node/executor/Cargo.toml b/bin/node/executor/Cargo.toml
index f5e04960b..7302cda4d 100644
--- a/bin/node/executor/Cargo.toml
+++ b/bin/node/executor/Cargo.toml
@@ -23,6 +23,7 @@ criterion = "0.3.0"
 grandpa = { package = "pallet-grandpa", path = "../../../frame/grandpa" }
 imonline = { package = "pallet-im-online", path = "../../../frame/im-online" }
 indices = { package = "pallet-indices", path = "../../../frame/indices" }
+# keyring = { package = "sp-keyring", path = "../../../primitives/keyring" }
 node-testing = { path = "../testing" }
 runtime_support = { package = "frame-support", path = "../../../frame/support" }
 session = { package = "pallet-session", path = "../../../frame/session" }
diff --git a/bin/node/executor/tests/basic.rs b/bin/node/executor/tests/basic.rs
index 4be7edb1c..0391cf80c 100644
--- a/bin/node/executor/tests/basic.rs
+++ b/bin/node/executor/tests/basic.rs
@@ -783,7 +783,7 @@ fn full_native_block_import_works_with_changes_trie() {
 		None,
 	).0.unwrap();
 
-	assert!(t.ext().storage_changes_root(GENESIS_HASH.into()).unwrap().is_some());
+	assert!(t.ext().storage_changes_root(&GENESIS_HASH).unwrap().is_some());
 }
 
 #[test]
@@ -799,7 +799,7 @@ fn full_wasm_block_import_works_with_changes_trie() {
 		None,
 	).0.unwrap();
 
-	assert!(t.ext().storage_changes_root(GENESIS_HASH.into()).unwrap().is_some());
+	assert!(t.ext().storage_changes_root(&GENESIS_HASH).unwrap().is_some());
 }
 
 #[test]
diff --git a/bin/node/executor/tests/submit_transaction.rs b/bin/node/executor/tests/submit_transaction.rs
index d9816e204..065870e6e 100644
--- a/bin/node/executor/tests/submit_transaction.rs
+++ b/bin/node/executor/tests/submit_transaction.rs
@@ -17,11 +17,15 @@
 use node_runtime::{
 	Call, Runtime, SubmitTransaction,
 };
+use primitives::traits::{KeystoreExt, BareCryptoStorePtr};
 use primitives::offchain::{
 	TransactionPoolExt,
 	testing::TestTransactionPoolExt,
 };
+use primitives::testing::KeyStore;
 use system::offchain::{SubmitSignedTransaction, SubmitUnsignedTransaction};
+use node_testing::keyring;
+
 
 mod common;
 use self::common::*;
@@ -50,16 +54,34 @@ fn should_submit_unsigned_transaction() {
 	});
 }
 
+use primitives::testing::{ED25519, SR25519};
 #[test]
 fn should_submit_signed_transaction() {
 	let mut t = new_test_ext(COMPACT_CODE, false);
 	let (pool, state) = TestTransactionPoolExt::new();
 	t.register_extension(TransactionPoolExt::new(pool));
 
+	let alice = keyring::alice();
+	let bob = keyring::bob();
+
+	let mut keystore = KeyStore::new();
+
+	let charlie = keystore.write().sr25519_generate_new(SR25519, Some("//beep")).unwrap();
+	dbg!(&charlie);
+	// let _ = keystore.write().sr25519_key_pair(SR25519, alice).unwrap();
+	dbg!(keystore.read().sr25519_public_keys(SR25519));
+
+	t.register_extension(KeystoreExt(keystore));
+
 	t.execute_with(|| {
-		let call = balances::Call::transfer(Default::default());
-		let results = SubmitSignedTransaction<Runtime, Call>
-			::submit_signed(call, vec![]);
+		let call = balances::Call::transfer(Default::default(), Default::default());
+		dbg!(&call);
+
+		// This should submit Txs from all local accounts (which should be in the keystore)
+		// This mean we should have three local accounts right now (but we have 0)
+		let results =
+			<SubmitTransaction as SubmitSignedTransaction<Runtime, Call>>::submit_signed(call);
+		dbg!(&results);
 
 		let len = results.len();
 		assert_eq!(len, 3);
@@ -67,3 +89,18 @@ fn should_submit_signed_transaction() {
 		assert_eq!(state.read().transactions.len(), len);
 	});
 }
+
+#[test]
+#[ignore]
+fn should_check_bug_that_tomek_described() {
+	let mut t = new_test_ext(COMPACT_CODE, false);
+	let (pool, state) = TestTransactionPoolExt::new();
+	t.register_extension(TransactionPoolExt::new(pool));
+
+	let mut keystore = KeyStore::new();
+	t.register_extension(KeystoreExt(keystore));
+
+	t.execute_with(|| {
+		// -- call submit_sign twice --
+	});
+}
diff --git a/bin/node/testing/src/keyring.rs b/bin/node/testing/src/keyring.rs
index 53dac6809..55b21cb34 100644
--- a/bin/node/testing/src/keyring.rs
+++ b/bin/node/testing/src/keyring.rs
@@ -23,7 +23,9 @@ use sp_runtime::generic::Era;
 use codec::Encode;
 
 /// Alice's account id.
-pub fn alice() -> AccountId { AccountKeyring::Alice.into() }
+pub fn alice() -> AccountId {
+	AccountKeyring::Alice.into()
+}
 
 /// Bob's account id.
 pub fn bob() -> AccountId {
diff --git a/frame/system/src/offchain.rs b/frame/system/src/offchain.rs
index 8c8e15021..b0a0b210d 100644
--- a/frame/system/src/offchain.rs
+++ b/frame/system/src/offchain.rs
@@ -228,7 +228,6 @@ pub trait SubmitSignedTransaction<T: crate::Trait, Call> {
 	}
 }
 
-
 /// A default type used to submit transactions to the pool.
 ///
 /// This is passed into each runtime as an opaque associated type that can have either of:
