# .gitlab-ci.yml
#
# substrate
#
# pipelines can be triggered manually in the web
# setting DEPLOY_TAG will only deploy the tagged image


stages:
  - test
  - build
  - publish
  - kubernetes
  - flaming-fir

image:                             ${REGISTRY}/substrate-ci-linux:latest

variables:
  GIT_STRATEGY:                    fetch
  GIT_DEPTH:                       3
  CARGO_HOME:                      "/ci-cache/${CI_PROJECT_NAME}/cargo/${CI_JOB_NAME}"
  # SCCACHE_DIR:                     "/ci-cache/${CI_PROJECT_NAME}/sccache"
  CARGO_TARGET_DIR:                "/ci-cache/${CI_PROJECT_NAME}/targets/${CI_COMMIT_REF_NAME}/${CI_JOB_NAME}"
  # CARGO_INCREMENTAL:               0
  REGISTRY:                        registry.parity.io/parity/infrastructure/scripts
  CI_SERVER_NAME:                  "GitLab CI"
  DOCKER_OS:                       "debian:stretch"
  ARCH:                            "x86_64"


.collect-artifacts:                &collect-artifacts
  artifacts:
    name:                          "${CI_JOB_NAME}_${CI_COMMIT_REF_NAME}"
    when:                          on_success
    expire_in:                     7 days
    paths:
      - artifacts/


.docker-env:                       &docker-env
  before_script:
    - rustup show
    - cargo --version
    - sccache -s
  only:
    - master
    - /^v[0-9]+\.[0-9]+.*$/        # i.e. v1.0, v2.1rc1
    - schedules
    - web
    - /^[0-9]+$/                   # PRs
  retry:
    max: 2
    when:
      - runner_system_failure
      - unknown_failure
      - api_failure
  dependencies:                    []
  interruptible:                   true
  tags:
    - ci6

.build-only:                       &build-only
  only:
    - master
    - /^v[0-9]+\.[0-9]+.*$/        # i.e. v1.0, v2.1rc1
    - web



#### stage:                        test
# test-linux-stable:                 &test-linux
#   stage:                           test
#   <<:                              *docker-env
#   variables:
#     # Enable debug assertions since we are running optimized builds for testing
#     # but still want to have debug assertions.
#     RUSTFLAGS: -Cdebug-assertions=y
#   except:
#     variables:
#       - $DEPLOY_TAG
#   script:
#     - WASM_BUILD_NO_COLOR=1 time cargo test --all --release --verbose --locked |
#         tee output.log
#     - sccache -s
#   after_script:
#     - echo "___Collecting warnings for check_warnings job___"
#     - awk '/^warning:/,/^$/ { print }' output.log > ${CI_COMMIT_SHORT_SHA}_warnings.log
#   artifacts:
#     name:                          $CI_COMMIT_SHORT_SHA
#     expire_in:                     24 hrs
#     paths:
#       - ${CI_COMMIT_SHORT_SHA}_warnings.log


#### stage:                        build

build-linux-substrate:
  stage:                           build
  <<:                              *collect-artifacts
  <<:                              *docker-env
  # <<:                              *build-only
  except:
    variables:
      - $DEPLOY_TAG
  script:
    - WASM_BUILD_NO_COLOR=1 time cargo build --release --verbose
    - mkdir -p ./artifacts/substrate/
    - cp ${CARGO_TARGET_DIR}/release/substrate ./artifacts/substrate/.
    - echo -n "Substrate version = "
    - if [ "${CI_COMMIT_TAG}" ]; then
        echo "${CI_COMMIT_TAG}" | tee ./artifacts/substrate/VERSION;
      else
        ./artifacts/substrate/substrate --version |
          sed -n -r 's/^substrate ([0-9.]+.*-[0-9a-f]{7,13})-.*$/\1/p' |
          tee ./artifacts/substrate/VERSION;
      fi
    - sha256sum ./artifacts/substrate/substrate | tee ./artifacts/substrate/substrate.sha256

build-linux-node-template:
  stage:                           build
  <<:                              *collect-artifacts
  <<:                              *docker-env
  # <<:                              *build-only
  except:
    variables:
      - $DEPLOY_TAG
  script:
      - mkdir -p ./artifacts/substrate/
      - ./.maintain/node-template-release.sh ./artifacts/substrate/substrate-node-template.tar.gz
      - cp -r .maintain/docker/substrate.Dockerfile ./artifacts/substrate/

# trigger the pipeline
control-trigger:
  stage:                           publish
  needs:
    - build-linux-substrate
  variables:
    CARGO_TARGET_DIR:              ""
    SUBSTRATE_VERSION:             tbdn
    SUBSTRATE_COMMIT:              $CI_COMMIT_SHA
    SUBSTRATE_JOB_ID:              $CI_JOB_ID
    SUBSTRATE_JOB_URL:             $CI_JOB_URL
  trigger:
    project:                       parity/srml-contracts-waterfall
    branch:                        "28"
    strategy:                      depend

# check_warnings:
#   stage:                           build
#   <<:                              *docker-env
#   except:
#     variables:
#       - $DEPLOY_TAG
#   variables:
#     GIT_STRATEGY:                  none
#   dependencies:
#     - test-linux-stable
#   script:
#     - if [ -s ${CI_COMMIT_SHORT_SHA}_warnings.log ]; then
#         cat ${CI_COMMIT_SHORT_SHA}_warnings.log;
#         exit 1;
#       else
#         echo "___No warnings___";
#       fi
#   allow_failure:                   true

# Check whether Polkadot 'master' branch builds using this Substrate commit.
# check_polkadot:
#   stage:                           build
#   <<:                              *docker-env
#   allow_failure:                   true
#   script:
#     - SUBSTRATE_PATH=$(pwd)
#     # Clone the current Polkadot master branch into ./polkadot.
#     - git clone --depth 1 https://gitlab.parity.io/parity/polkadot.git
#     - cd polkadot
#     # Make sure we override the crates in native and wasm build
#     - mkdir .cargo
#     - echo "paths = [ \"$SUBSTRATE_PATH\" ]" > .cargo/config
#     - mkdir -p target/debug/wbuild/.cargo
#     - echo "paths = [ \"$SUBSTRATE_PATH\" ]" > target/debug/wbuild/.cargo/config
#     # package, others are updated along the way.
#     - cargo update
#     # Check whether Polkadot 'master' branch builds with this Substrate commit.
#     - time cargo check
#     - cd -
#     - sccache -s